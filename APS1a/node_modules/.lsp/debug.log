Hello - from c:\Users\micka\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\micka\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/micka/Desktop/master/sorbonne/m1/s2/aps/git/APS_Carla_Mickael/APS1a/prologTerm.ml","languageId":"ocaml","version":3,"text":"(* ========================================================================== *)\n(* == UPMC/master/info/4I506 -- Janvier 2016/2017/2018                     == *)\n(* == SU/FSI/master/info/MU4IN503 -- Janvier 2020/2021/2022                == *)\n(* == Analyse des programmes et sémantiques                                == *)\n(* ========================================================================== *)\n(* == hello-APS Syntaxe ML                                                 == *)\n(* == Fichier: prologTerm.ml                                               == *)\n(* ==  Génération de termes Prolog                                         == *)\n(* ========================================================================== *)\nopen Ast\n  \n\nlet rec print_list print l sep =\n  match l with\n  [] -> ()\n  | [x] -> print x;\n  | x::reste -> print x; Printf.printf \"%s\" sep; print_list print reste sep\n\n\nlet rec print_expr e =\n  match e with\n      ASTNum n -> Printf.printf \"%d\" n\n    | ASTId x -> Printf.printf\"id(%s)\" x\n    | ASTBool x -> Printf.printf \"%B\" x\n    | ASTApp(e, es) -> (\n      Printf.printf\"app(\";\n      print_expr e;\n      Printf.printf\",[\";\n      print_list print_expr es \",\";\n      Printf.printf\"])\"\n    )\n    | ASTIf(cond,vrai,faux) -> (\n      Printf.printf \"if\";\n      Printf.printf \"(\";\n      print_expr cond;\n      Printf.printf \",\";\n      print_expr vrai;\n      Printf.printf \",\";\n      print_expr faux;\n      Printf.printf \")\";\n    )\n    | ASTAnd(e1,e2) -> (\n      Printf.printf \"and\";\n      Printf.printf \"(\";\n      print_expr e1;\n      Printf.printf \",\";\n      print_expr e2;\n      Printf.printf \")\";\n    )\n    | ASTFun(args,e) -> (\n      Printf.printf \"abs\";\n      Printf.printf \"(\";\n      Printf.printf \"[\";\n      print_list print_arg args \",\";\n      Printf.printf \"]\";\n      Printf.printf \",\";\n      print_expr e;\n      Printf.printf \")\";\n    )\n    | ASTOr(e1,e2) -> (\n      Printf.printf \"or\";\n      Printf.printf \"(\";\n      print_expr e1;\n      Printf.printf \",\";\n      print_expr e2;\n      Printf.printf \")\";\n    )\n\nand print_exprp ep = \n  match ep with\n    ASTExprpExpr(e) -> print_expr e;\n    | ASTExprpAdr(x)->(\n      Printf.printf \"adr\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" x;\n      Printf.printf \")\";\n    )\n\n\nand print_stat s =\n  match s with\n      ASTEcho e -> (\n        Printf.printf(\"echo(\");\n        print_expr(e);\n        Printf.printf(\")\")\n        )\n      | ASTSet(x,e)-> \n        Printf.printf(\"set\");\n        Printf.printf \"(\";\n        Printf.printf \"%s\" x;\n        print_char ',';\n        print_expr e;\n        Printf.printf \")\";\n      | ASTIfStat(e,bk1,bk2)-> (\n        Printf.printf \"if\";\n        Printf.printf \"(\";\n        print_expr e;\n        Printf.printf \",\";\n        print_block bk1;\n        Printf.printf \",\";\n        print_block bk2;\n        Printf.printf \")\";\n        )\n      | ASTWhile(e,bk)->(\n        Printf.printf \"while\";\n        Printf.printf \"(\";\n        print_expr e;\n        Printf.printf \",\";\n        print_block bk;\n        Printf.printf \")\";\n        )\n      | ASTCall(x,eps)->(\n        Printf.printf \"call\";\n        Printf.printf \"(\";\n        Printf.printf \"%s\" x;\n        Printf.printf \",\";\n        Printf.printf\"[\";\n        print_list print_exprp eps \",\";\n        Printf.printf\"]\";\n        Printf.printf \")\";\n        )\n\nand print_cmd c =\n  match c with\n      ASTStat(s) -> \n        Printf.printf \"stat(\";\n        print_stat s;\n        Printf.printf \")\";\n      | ASTDef(d) -> print_def d\n      \n\t\nand print_cmds cs =\n  match cs with\n      c::[] -> print_cmd c\n    | c:: cbis -> \n      print_cmd c ; \n      Printf.printf \",\";\n      print_cmds cbis;\n    | _ -> failwith \"not yet implemented 2\"\n\nand print_type t=\n  match t with \n  ASTTypBool -> Printf.printf \"bool\";\n  | ASTTypInt -> Printf.printf \"int\";\n  | ASTTypVoid ->  Printf.printf \"void\";\n  | ASTTypFleche(typs,typ) -> (\n      Printf.printf \"fleche(\";\n      Printf.printf \"[\";\n      print_list print_type typs \",\"; \n      Printf.printf \"]\";\n      Printf.printf \",\";\n      print_type typ;\n      Printf.printf \")\";\n    )\n  | ASTref(typ)-> \n      Printf.printf \"ref(\";\n      print_type typ;\n      Printf.printf \")\";\n\n\nand print_arg arg = \n  match arg with\n    ASTArg(nom, typ) -> (\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type typ;\n      Printf.printf \")\"\n    )\n\n\nand print_argp ap= \n  match ap with\n    ASTArgp(nom, typ) -> (\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type typ;\n      Printf.printf \")\"\n      )\n    | ASTArgpVar(nom,typ) -> (\n      Printf.printf \"var\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type typ;\n      Printf.printf \")\")\n\n\n\nand print_def d = \n  match d with\n    ASTDefConst(nom, ty, e) -> (\n      Printf.printf \"const\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type ty;\n      Printf.printf \",\";\n      print_expr e;\n      Printf.printf \")\";\n    )\n  | ASTDefFun(nom, ty, args, e) -> (\n      Printf.printf \"fun\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type ty;\n      Printf.printf \",\";\n      Printf.printf \"[\";\n      print_list print_arg args \",\";\n      Printf.printf \"]\";\n      Printf.printf \",\";\n      print_expr e;\n      Printf.printf \")\";\n    )\n  | ASTDefFunRec(nom, ty, args, e) -> (\n      Printf.printf \"funrec\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type ty;\n      Printf.printf \",\";\n      Printf.printf \"[\";\n      print_list print_arg args \",\";\n      Printf.printf \"]\";\n      Printf.printf \",\";\n      print_expr e;\n      Printf.printf \")\";\n    )\n  | ASTDefVar(nom,ty)->(\n      Printf.printf \"var\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" nom;\n      Printf.printf \",\";\n      print_type ty;\n      Printf.printf \")\";\n    )\n  | ASTDefProc(x,argsp,bk)-> (\n      Printf.printf \"proc\";\n      Printf.printf \"(\";\n      Printf.printf \"%s\" x;\n      Printf.printf \",\";\n      Printf.printf \"[\";\n      print_list print_argp argsp \",\";\n      Printf.printf \"]\";\n      Printf.printf \",\";\n      print_block bk;\n      Printf.printf \")\";\n    )\n  | ASTDefProcRec(x,argsp,bk)-> (\n    Printf.printf \"procrec\";\n    Printf.printf \"(\";\n    Printf.printf \"%s\" x;\n    Printf.printf \",\";\n    Printf.printf \"[\";\n    print_list print_argp argsp \",\";\n    Printf.printf \"]\";\n    Printf.printf \",\";\n    print_block bk;\n    Printf.printf \")\";\n    )\n\nand print_block cs =\n  Printf.printf(\"block([\");\n  print_cmds cs;\n  Printf.printf(\"])\")\n\nand print_prog p =\n  Printf.printf(\"prog(\");\n  print_block p;\n  Printf.printf(\")\")\n;;\n\t\nlet fname = Sys.argv.(1) in\nlet ic = open_in fname in\n  try\n    let lexbuf = Lexing.from_channel ic in\n    let p = Parser.prog Lexer.token lexbuf in\n      print_prog p;\n      print_string \".\\n\"\n  with Lexer.Eof ->\n    exit 0\n      \n"}}}
